version: '3.1'

services:
  # main-service:
  #   image: 'main-service-image'
  #   container_name: 'main-service-container'
  #   environment:
  #     - SERVER_PORT=8001
  #     - FEIGN_USER_URL=http://keycloak-service:8000/
  #     - KEYCLOAK_URL=http://keycloak:8080/auth
  #     - KEYCLOAK_REALM=car-realm
  #     - KEYCLOAK_CLIENT_ID=car-service-client
  #     - KEYCLOAK_CLIENT_SECRET=DOMNSwH6mwpyl3nZCEkx44dCuJmgPXTo
  #     - KEYCLOAK_USERNAME=admin123
  #     - KEYCLOAK_PASSWORD=admin123
  #     - KEYCLOAK_GRANT_TYPE=password
  #   ports:
  #     - 8001:8001
  #   depends_on:
  #     - keycloak-service
  #   networks:
  #     - my-network

  # keycloak-service:
  #   image: 'final-keycloak-service'
  #   container_name: 'final-keycloak-service-container'
  #   environment:
  #     - SERVER_PORT=8000
  #     # - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/auth/realms/car-realm
  #     - KEYCLOAK_URL=http://keycloak:8080/auth
  #     - KEYCLOAK_REALM=car-realm
  #     - KEYCLOAK_CLIENT_ID=car-service-client
  #     - KEYCLOAK_CLIENT_SECRET=DOMNSwH6mwpyl3nZCEkx44dCuJmgPXTo
  #     - KEYCLOAK_USERNAME=admin123
  #     - KEYCLOAK_PASSWORD=admin123
  #     - KEYCLOAK_GRANT_TYPE=password
  #   ports:
  #     - 8000:8000
  #   networks:
  #     - my-network

  minio:
    image: quay.io/minio/minio
    container_name: 'minio_container'
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: aWsJX_KR8_als_5F_Ck
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 5
      timeout: 5s
      start_period: 10s
    networks:
      - my-network

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MC_HOST: http://root:aWsJX_KR8_als_5F_Ck@minio:9000
    entrypoint: >
      /bin/sh -c "
        echo Starting Minio...;
        mc alias set minio http://minio:9000 root aWsJX_KR8_als_5F_Ck;
        mc mb minio/our-bucket;
        exit 0;
      "
    networks:
      - my-network

  minio-db:
    image: 'postgres'
    container_name: 'minio-db-container'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5433:5432
    networks:
      - my-network

  file-service:
    image: 'file-service-image'
    container_name: 'file-service-container'
    depends_on:
      - minio-db
      - minio
      - minio-setup
    environment:
      - SERVER_PORT=8002
      - SPRING_DATASOURCE_URL=jdbc:postgresql://minio-db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - MINIO_URL=http://minio:9000
      - MINIO_USER=root
      - MINIO_PASSWORD=aWsJX_KR8_als_5F_Ck
      - MINIO_BUCKET=our-bucket
      - SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE=5MB
    ports:
      - 8002:8002
    networks:
      - my-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - my-network

  car-db:
    image: 'postgres'
    container_name: 'car-db-container'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5434:5432
    networks:
      - my-network

  redis:
    image: 'redis:latest'
    ports:
      - 6379:6379
    networks:
      - my-network

networks:
  my-network:
    external: true
